require_relative '../../test_helper'

require_relative '../../../lib/racket/l4/icmp'

class TestICMP < Minitest::Test
	def test_init
		Racket::L4::ICMP.new
		Racket::L4::ICMP.new Racket::Misc.randstring(20)
	end


	def test_raw
		binary = "\x08\x00\x05\x7e\xab\x58\x00\x01\x78\xf1\x09\x4b\x00\x00\x00\x00\xce\xe6\x05\x00\x00\x00\x00\x00\x0e\x0f\x0a\x0b\x0c\x0d\x0e\x0f\x0a\x0b\x0c\x0d\x0e\x0f\x0a\x0b\x0c\x0d\x0e\x0f\x0a\x0b\x0c\x0d\x0e\x0f\x0a\x0b\x0c\x0d\x0e\x0f\x0a\x0b\x0c\x0d\x0e\x0f\x0a\x0b"
		i = Racket::L4::ICMP.new binary
		assert_equal i.type, 8
		assert_equal i.code, 0
		assert_equal i.checksum, 0x057e
		assert_equal i.payload, "\xab\x58\x00\x01\x78\xf1\x09\x4b\x00\x00\x00\x00\xce\xe6\x05\x00\x00\x00\x00\x00\x0e\x0f\x0a\x0b\x0c\x0d\x0e\x0f\x0a\x0b\x0c\x0d\x0e\x0f\x0a\x0b\x0c\x0d\x0e\x0f\x0a\x0b\x0c\x0d\x0e\x0f\x0a\x0b\x0c\x0d\x0e\x0f\x0a\x0b\x0c\x0d\x0e\x0f\x0a\x0b"
	end


	def test_build
		i = Racket::L4::ICMP.new
		i.type = 8
		i.code = 0
		i.payload = 'thisisatest'
		i.fix!

		assert_equal i.checksum, 30152
	end
end
